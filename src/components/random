(() => {
    "use strict";
    
    var modules = {
        740: (module, exports) => {
            Object.defineProperty(exports, "__esModule", { value: true });
            exports.Bar = void 0;
            
            class Bar {
                constructor(analyser) {
                    this.capYPositionArray = [];
                    this.capHeight = 8;
                    this.meterStep = 0.5;
                    this.canvasId = "youtube-music-visualizer";
                    this.settings = {};
                    this.array = new Uint8Array(analyser.frequencyBinCount);
                    analyser.fftSize = 2048;
                    analyser.minDecibels = -90;
                    analyser.maxDecibels = 0;
                    this.analyser = analyser;
                    this.buildCanvas();
                    this.barWidth2 = this.canvas.width / this.settings.barCount;
                }
                
                buildCanvas() {
                    if (!document.getElementById(this.canvasId)) {
                        this.canvas = document.createElement("canvas");
                        this.canvas2D = this.canvas.getContext("2d");
                        this.canvas.style.cssText = "position:fixed;bottom:0;z-index:999999;width:100%;pointer-events: none;";
                        this.canvas.setAttribute("id", this.canvasId);
                        this.canvas.setAttribute("width", String(window.innerWidth));
                        this.canvas.setAttribute("height", String(window.innerHeight));
                        document.body.appendChild(this.canvas);
                    }
                }
                
                drawRect(x, y, height) {
                    y = this.canvas.height - y * this.canvas.height / 255;
                    this.canvas2D.fillRect(x * (this.barWidth2 + this.meterStep), y, this.barWidth2 - this.meterStep, height);
                }
                
                destroy() {
                    this.stop();
                    this.canvas.remove();
                }
                
                start() {
                    this.analyser.getByteFrequencyData(this.array);
                    this.canvas2D.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    for (let i = 0; i < this.settings.barCount; i++) {
                        if (this.settings.capsEnabled) this.drawCaps(i);
                        this.drawRect(i, this.array[i], this.canvas.height);
                    }
                    Bar.call = requestAnimationFrame(this.start.bind(this));
                }
                
                drawCaps(index) {
                    if (this.array[index] < this.capYPositionArray[index]) {
                        this.drawRect(index, --this.capYPositionArray[index], this.capHeight);
                    } else {
                        this.drawRect(index, this.canvas.height, this.capHeight);
                        this.capYPositionArray[index] = this.array[index];
                    }
                }
                
                stop() {
                    this.canvas2D.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    cancelAnimationFrame(Bar.call);
                }
                
                process(settings) {
                    for (const key in settings) {
                        if (settings.hasOwnProperty(key)) {
                            this.settings[key] = settings[key];
                        }
                    }
                    this.onSettingsChanged();
                }
                
                onSettingsChanged() {
                    const gradient = this.canvas2D.createLinearGradient(0, 0, 0, this.canvas.height);
                    gradient.addColorStop(1, this.settings.bottom);
                    gradient.addColorStop(0.7, this.settings.middle);
                    gradient.addColorStop(0, this.settings.top);
                    this.canvas2D.globalAlpha = this.settings.opacity;
                    this.canvas.style.height = window.innerHeight * (this.settings.barHeight / 100) + "px";
                    this.canvas2D.fillStyle = gradient;
                    this.barWidth2 = this.canvas.width / this.settings.barCount;
                }
            }
            
            exports.Bar = Bar;
        },
        
        50: (module, exports) => {
            Object.defineProperty(exports, "__esModule", { value: true });
            exports.Circle = void 0;
            
            class Circle {
                constructor(analyser, video) {
                    this.canvasId = "youtube-music-visualizer-circle";
                    this.settings = {};
                    this.bars = 200;
                    this.bar_width = 6;
                    this.frequency_array = new Uint8Array(analyser.frequencyBinCount);
                    analyser.fftSize = 2048;
                    analyser.minDecibels = -90;
                    analyser.maxDecibels = 0;
                    this.analyser = analyser;
                    this.video = video;
                    this.buildCanvas();
                }
                
                setCanvasSizes() {
                    const video = document.querySelector("video.video-stream.html5-main-video");
                    this.center_x = video.clientWidth / 2;
                    this.center_y = video.clientHeight / 2;
                    this.canvas.width = video.clientWidth;
                    this.canvas.height = video.clientHeight;
                    this.canvas.style.width = video.clientWidth + "px";
                    this.canvas.style.height = video.clientHeight + "px";
                    this.canvas.style.left = video.style.left;
                }
                
                buildCanvas() {
                    if (document.getElementById(this.canvasId)) return;
                    this.canvas = document.createElement("canvas");
                    this.ctx = this.canvas.getContext("2d");
                    this.canvas.setAttribute("id", this.canvasId);
                    const container = document.querySelector("div.html5-video-container");
                    this.canvas.width = window.innerWidth;
                    this.canvas.height = window.innerHeight;
                    this.radius = 200;
                    this.canvas.style.cssText = "pointer-events:none;left:0;top:0;position:relative;";
                    this.setCanvasSizes();
                    container.append(this.canvas);
                    new MutationObserver((mutations => mutations.forEach(() => this.setCanvasSizes()))).observe(this.video, { attributes: true, attributeFilter: ["style"] });
                }
                
                destroy() {
                    this.stop();
                    this.canvas.remove();
                }
                
                start() {
                    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                    this.ctx.beginPath();
                    this.ctx.arc(this.center_x, this.center_y, this.radius, 0, 2 * Math.PI);
                    this.ctx.stroke();
                    this.analyser.getByteFrequencyData(this.frequency_array);
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    for (let i = 0; i < this.bars; i++) {
                        let angle = 2 * Math.PI / this.bars;
                        this.bar_height = 0.7 * this.frequency_array[i];
                        let x_start = this.center_x + Math.cos(angle * i) * this.radius;
                        let y_start = this.center_y + Math.sin(angle * i) * this.radius;
                        let x_end = this.center_x + Math.cos(angle * i) * (this.radius + this.bar_height);
                        let y_end = this.center_y + Math.sin(angle * i) * (this.radius + this.bar_height);
                        this.drawBar(x_start, y_start, x_end, y_end, this.bar_width, this.frequency_array[i]);
                    }
                    Circle.call = window.requestAnimationFrame(this.start.bind(this));
                }
                
                drawBar(x1, y1, x2, y2, width, colorValue) {
                    this.ctx.strokeStyle = `rgb(${colorValue}, ${colorValue}, 205)`;
                    this.ctx.lineWidth = width;
                    this.ctx.beginPath();
                    this.ctx.moveTo(x1, y1);
                    this.ctx.lineTo(x2, y2);
                    this.ctx.stroke();
                }
                
                stop() {
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    cancelAnimationFrame(Circle.call);
                }
                
                process(settings) {
                    for (const key in settings) {
                        if (settings.hasOwnProperty(key)) {
                            this.settings[key] = settings[key];
                        }
                    }
                }
            }
            
            exports.Circle = Circle;
        },
        
        777: function (module, exports, require) {
            var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            Object.defineProperty(exports, "__esModule", { value: true });
            const Bar = require(740).Bar;
            const Circle = require(50).Circle;
            const state = { selected: null };
            
            function stopVisualizer() {
                if (state.selected) {
                    state.selected.stop();
                }
            }
            
            function startVisualizer(galaxy, analyser, video) {
                if (state.selected) {
                    state.selected.destroy();
                    state.selected = null;
                }
                if (galaxy === "andromeda") {
                    state.selected = new Bar(analyser);
                } else if (galaxy === "n16") {
                    state.selected = new Circle(analyser, video);
                } else {
                    console.log("Invalid galaxy!");
                }
                if (state.selected) {
                    chrome.runtime.sendMessage("settings", (settings) => {
                        state.selected.process(settings);
                    });
                    chrome.runtime.sendMessage("mg-visualiser-activated", (activated) => {
                        if (activated) {
                            state.selected.start();
                        }
                    });
                }
            }
            
            chrome.runtime.sendMessage("galaxy", (galaxy) => __awaiter(void 0, void 0, void 0, function* () {
                if (!galaxy) return;
                function showToast() {
                    const now = new Date();
                    const today = `${now.getDate()}-${now.getMonth()}-${now.getFullYear()}`;
                    const toastDisplayed = "donate_toast_displayed";
                    const lastDisplayed = localStorage.getItem(toastDisplayed);
                    if (lastDisplayed && lastDisplayed === today) return;
                    localStorage.setItem(toastDisplayed, today);
                    setTimeout(() => {
                        const toast = document.createElement("div");
                        toast.id = "mv-toast";
                        const img = document.createElement("img");
                        img.id = "mv-img";
                        img.src = chrome.runtime.getURL("images/256.png");
                        const desc = document.createElement("div");
                        desc.id = "mv-desc";
                        desc.innerText = "Please donate :)";
                        document.body.appendChild(toast);
                        toast.appendChild(img);
                        toast.appendChild(desc);
                        toast.className = "show-toast";
                        setTimeout(() => {
                            toast.className = toast.className.replace("show-toast", "");
                        }, 5000);
                    }, 2000);
                }
                
                showToast();
                
                const { analyser, video } = yield (() => __awaiter(void 0, void 0, void 0, function* () {
                    const videoElement = yield new Promise((resolve) => {
                        const selector = "video.video-stream";
                        if (document.querySelector(selector)) return resolve(document.querySelector(selector));
                        const observer = new MutationObserver((mutations) => {
                            if (document.querySelector(selector)) {
                                resolve(document.querySelector(selector));
                                observer.disconnect();
                            }
                        });
                        observer.observe(document.body, { childList: true, subtree: true });
                    }));
                    
                    const audioContext = new AudioContext();
                    const source = audioContext.createMediaElementSource(videoElement);
                    const analyser = audioContext.createAnalyser();
                    source.connect(analyser);
                    source.connect(audioContext.destination);
                    return { video: videoElement, analyser };
                }))();
                
                if (video.readyState >= video.HAVE_FUTURE_DATA) {
                    startVisualizer(galaxy, analyser, video);
                } else {
                    video.addEventListener("canplay", () => startVisualizer(galaxy, analyser, video), false);
                }
                
                video.addEventListener("pause", stopVisualizer, false);
                video.addEventListener("suspend", stopVisualizer, false);
                video.addEventListener("abort", stopVisualizer, false);
                video.addEventListener("ended", stopVisualizer, false);
                video.addEventListener("play", () => {
                    if (state.selected) {
                        state.selected.start();
                    }
                }, false);
                
                chrome.runtime.onMessage.addListener((message) => {
                    if (message.action) {
                        if (message.action === "mg-visualiser-activated") {
                            if (message.activated) {
                                state.selected.start();
                            } else {
                                state.selected.stop();
                            }
                        } else if (message.action === "galaxy") {
                            startVisualizer(message.value, analyser, video);
                        }
                    } else {
                        state.selected.process(message);
                    }
                });
            }));
        }
    };
    
    (function run(moduleId) {
        var module = modules[moduleId];
        if (module.exports) return module.exports;
        module.exports = {};
        module.call(module.exports, module, module.exports, run);
        return module.exports;
    })(777);
})();
